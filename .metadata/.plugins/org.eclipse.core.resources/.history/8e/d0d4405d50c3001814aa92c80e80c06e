import java.util.Scanner;

public class CandidateCode {
	int largest;
	String pattern;
	int size;
	int smallest;
	public CandidateCode(int size, String pattern, int largest, int smallest) {
		this.size = size;
		this.pattern = pattern;
		this.largest = largest;
		this.smallest = smallest;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		long start = System.currentTimeMillis();
		Scanner sc = new Scanner(System.in);
		int size = sc.nextInt();
		String pattern = sc.next() + sc.nextLine();
		CandidateCode lm = new CandidateCode(size, pattern, 0, 0);
		int j;
		int largestTemp = 0;
		int leftIndex = 0;
		int rightIndex = size - 1;
		int left[] = new int[200];
		int right[] = new int[200];
		for(int i = 0 ; i < size - 1; i++) {
			for(j = size - 1; j > i; j--) {
			//if(lm.largest >= j - i + 1)break;
			if(lm.pattern.charAt(i) == lm.pattern.charAt(j)) {
				largestTemp = findPallindrome(lm, i, j, i, j);
//				if(lm.largest < largestTemp) {
//					lm.largest = largestTemp;
//					leftIndex = i;
//					rightIndex = j;
//				}
				if(largestTemp > 0 ) {
					System.out.println("In large");
					findSmallest(size, lm, i, j);
				};
				
			}
			
			}
		}
		System.out.println(lm.smallest);

	}

	private static void findSmallest(int size, CandidateCode lm, int leftIndex, int rightIndex) {
		int left[] = new int[200];
		int right[] = new int[200];
		int count = 0;
		for(int i = 0; i < leftIndex; i++) {
			left[lm.pattern.charAt(i)]++;
		}
		for(int i = rightIndex + 1; i < size; i++) {
			right[lm.pattern.charAt(i)]++;
		}
		
		int i = 0;
		while(i < 123) {
			if(left[i] != 0 && right[i] != 0)
				count = count + Math.abs(right[i] - left[i]);
			else if(left[i] != 0)
				count += (left[i]);
			else if(right[i] != 0)
				count += (right[i]);
			
			i++;
		}
		if(lm.smallest > count) {
			lm.smallest = count;
		}
//System.out.println("dj5jerkfjhsjddsfghdsligse7rt394hkwdhfsdfhsfkdhsds".length());
	}

	private static int findPallindrome(CandidateCode lm, int i, int j, int i2, int j2) {
		// TODO Auto-generated method stub
		if(i2 == j2 || (lm.pattern.charAt(i2) == lm.pattern.charAt(j2) && (i2 + 1 == j2))) {
			
			return j - i + 1;
		}
		if(lm.pattern.charAt(i2) == (lm.pattern.charAt(j2))) {
			return findPallindrome(lm, i, j, i2+1, j2-1);
		}
		
		return 0;
	}

}
